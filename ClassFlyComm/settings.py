"""
Django settings for ClassFlyComm project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))



import dj_database_url
import dotenv
import django_heroku


# This is new:
dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dyuo!=9@xvo8*s+lf#t)xw6a7_dn%)wucex^0uccu#+9=u1b$^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

DEBUG_PROPAGATE_EXCEPTIONS = True

COMPRESS_ENABLED = os.environ.get('COMPRESS_ENABLED', False)

ALLOWED_HOSTS = ['localhost','127.0.0.1' ,'classflycommunity.herokuapp.com','classfly.in']


# Application definition
# https://itnext.io/heroku-chatbot-with-celery-websockets-and-redis-340fcd160f06
INSTALLED_APPS = [
    'fresher',
    'user',
    'video',
    'exam',
    'upload',
    'pro',
    'chatt',
    'channels',
    'call',
    'intervideo',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'interview',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    
]

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:8000',
#     'https://www.classfly.in',
#     'https://classfly.in'
# )

ROOT_URLCONF = 'ClassFlyComm.urls'
ASGI_APPLICATION = "ClassFlyComm.routing.application"


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ['REDIS_URL'],  # Here we have Redis DSN (for ex. redis://localhost:6379/1)
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "MAX_ENTRIES": 1000  # Increase max cache entries to 1k (from 300)
        },
    }
}




CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [os.environ['REDIS_URL']],
        },
    },
}

# CHANNEL_LAYERS = {
    
#     "default": {
#         "BACKEND": "asgi_redis.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [os.environ.get('REDIS_URL', 'rediss://:pe8586157d58d6c7e8d69c9879829d808b16354b8a7a87dfd976a82125845a61b@ec2-108-128-33-61.eu-west-1.compute.amazonaws.com:15710')],

#         },
#         "ROUTING": "chat.routing.channel_routing",
#     },
#      'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('redis://:pe8586157d58d6c7e8d69c9879829d808b16354b8a7a87dfd976a82125845a61b@ec2-108-128-33-61.eu-west-1.compute.amazonaws.com',15709)],
#         },
#     },
# }



# "rediss://:pe8586157d58d6c7e8d69c9879829d808b16354b8a7a87dfd976a82125845a61b@ec2-108-128-33-61.eu-west-1.compute.amazonaws.com:15710"


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates/'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django.core.context_processors.i18n',
                # 'django.core.context_processors.media',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler'
}

WSGI_APPLICATION = 'ClassFlyComm.wsgi.application'



# Database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'djangogirls',
#         'USER': 'name',
#         'PASSWORD': '',
#         'HOST': 'localhost',
#         'PORT': '',
#     }
# }


DATABASES = {}
DATABASES['default'] = dj_database_url.config(conn_max_age=600)


# db_from_env = dj_database_url.config(conn_max_age=600)
# DATABASES['default'].update(db_from_env)



# db_from_env = dj_database_url.config(conn_max_age=600)
# DATABASES['default'].update(db_from_env)


# django_heroku.settings(locals())
# del DATABASES['default']['OPTIONS']['sslmode']

from django.urls import reverse_lazy

LOGIN_URL =  reverse_lazy('login')
# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
# The URL to use when referring to static files (where they will be served from)
STATIC_URL = '/static/'

# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# This should already be in your settings.py
django_heroku.settings(locals())

options = DATABASES['default'].get('OPTIONS', {})
options.pop('sslmode', None)

#save session for every request, session will not expires.
SESSION_SAVE_EVERY_REQUEST = True


ACCESS_TOKEN_VIDEO = 'd17ad52c-a7cd-4d0f-baeb-096038163452'

SECRET_KEY_VIDEO = 'oKSHDGrS3rdKPZ0QFCScAbJrJ/duZVaceyTVkIBFn7SgHb3e7H3qzADLIN3V+mQiG6qe99q/Q9B'


# #production preparation variables
# SECURE_HSTS_SECONDS = 31536000

# SECURE_CONTENT_TYPE_NOSNIFF = True

# SECURE_BROWSER_XSS_FILTER = True

# SECURE_SSL_REDIRECT = True

# SESSION_COOKIE_SECURE = True

# CSRF_COOKIE_SECURE = True

# X_FRAME_OPTIONS = 'DENY'

# SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# SECURE_HSTS_PRELOAD = True



# BROKER_URL=os.environ['REDIS_URL']
# BROKER_URL = os.environ['REDIS_URL']
CELERY_RESULT_BACKEND=os.environ['REDIS_URL']


CELERY_BROKER_URL = os.environ['REDIS_URL']
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_IGNORE_RESULT = False # this is less important
CELERY_TRACK_STARTED = True

FORKED_BY_MULTIPROCESSING=2

# CELERY_RESULT_BACKEND = os.environ['REDIS_URL']



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'classfly.in@gmail.com'
EMAIL_HOST_PASSWORD = 'hfuzrqtspqwwefox'

VDO_API = "uVigALnjD16hnj2770F07XGJS2bRNfLrTVv08gYWfsL8KMcD2uNWp9GSpSglq7Ta"


# Razorpay
KEY_ID = 'rzp_test_ufU0SSyGNbrP2q'
KEY_SECRET = '75v0XLMgYytmqphZ1WmITrxO'
